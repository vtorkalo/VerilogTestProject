module lcd_module(
  input CLK,
  input init,
  input command,
  input[7:0] commandCode,
  
  output reg [3:0] LCD_D,
  output reg LCD_E,
  output reg LCD_RS,
  output reg LED,
  
   
  output reg[3:0] d0,
  output reg[3:0] d1,
  output reg[3:0] d2,
  output reg[3:0] d3
);

localparam NOT_INIT = 0, INITIALIZING = 1, READY = 2;

reg [1:0] state = NOT_INIT;


localparam IDLE = 0, INIT = 1, HIGH_B = 2, LOW_B = 3;
reg [1:0] trans_state = IDLE;

reg [3:0] send_l;
reg [3:0] send_h;



reg [8:0] e_timer;
reg [12:0] delay_timer;

reg e_timer_en;
reg delay_timer_en;

always @(posedge CLK)
begin
   if (e_timer_en)
   begin
      e_timer <= e_timer + 1;
   end
   if (delay_timer_en)
   begin
      delay_timer <= delay_timer + 1; 
   end
   
	 
   if (init)
   begin     
      d0 <= d0 +1; 
      LED <= ~LED;     
      state <= INITIALIZING;
      LCD_D <= 4'b0010; //set 4-bit mode
	   trans_state <= INIT;
      
	   LCD_E <= 1;   //start sync pulse
      e_timer <= 0;
      e_timer_en <= 1;
      
      delay_timer_en <= 0;      
      
      send_h <= 4'b0010;
      send_l <= 4'b1100;      
   end    	 
   
   if (command)
   begin
      send_h <= commandCode[7:4];
      send_l <= commandCode[3:0];
      trans_state <= HIGH_B;
      LCD_D <= send_h;         
      LCD_E <= 1;  //start sync pulse         
      e_timer_en <= 1;
      e_timer <= 0;
   end
	 
	if (e_timer[7] & LCD_E)
	begin		   
	   LCD_E <= 0;
      LCD_D <= 0;
      
      e_timer_en <= 0;
      e_timer <= 0;
      
      delay_timer <= 0;
      delay_timer_en <= 1;
   end
    
   if (delay_timer[11])
   begin
      if (trans_state == INIT)
      begin         
         trans_state <= HIGH_B;
        
         LCD_D <= send_h;
         
         LCD_E <= 1;  //start sync pulse         
         e_timer_en <= 1;
         e_timer <= 0;
      end else
      if (trans_state == HIGH_B)
      begin
         trans_state <=  LOW_B;
         LCD_D <= send_l;
          
         LCD_E <= 1;      //start sync pulse
         e_timer <= 0;
         e_timer_en <= 1;                 
      end else
      if (trans_state == LOW_B)
      begin
         trans_state <=  IDLE;
      end
      
      delay_timer_en <= 0;
      delay_timer <= 0;
   end
end
endmodule